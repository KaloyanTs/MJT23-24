package bg.sofia.uni.fmi.mjt.itinerary;

import bg.sofia.uni.fmi.mjt.itinerary.exception.CityNotKnownException;
import bg.sofia.uni.fmi.mjt.itinerary.exception.NoPathToDestinationException;
import bg.sofia.uni.fmi.mjt.itinerary.vehicle.VehicleType;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.List;
import java.util.SequencedCollection;

public class RideRightTest {

    @Test
    void testMyLargeGraph() throws CityNotKnownException, NoPathToDestinationException {
        City A = new City("A", new Location(20, 20));
        City B = new City("B", new Location(180, 140));
        City C = new City("C", new Location(120, 100));
        City D = new City("D", new Location(100, 120));
        City E = new City("E", new Location(80, 120));
        City F = new City("F", new Location(40, 120));
        City G = new City("G", new Location(60, 80));
        City H = new City("H", new Location(100, 60));
        City I = new City("I", new Location(140, 60));
        City J = new City("J", new Location(180, 40));
        City K = new City("K", new Location(200, 20));
        City L = new City("L", new Location(100, 20));
        City M = new City("M", new Location(60, 60));
        City N = new City("N", new Location(20, 80));
        City O = new City("O", new Location(80, 160));
        City P = new City("P", new Location(100, 180));
        City Q = new City("Q", new Location(140, 180));
        City R = new City("R", new Location(140, 80));
        City S = new City("S", new Location(160, 80));
        City T = new City("T", new Location(160, 60));
        City U = new City("U", new Location(200, 100));
        City V = new City("V", new Location(120, 140));
        City W = new City("W", new Location(40, 160));
        City Z = new City("Z", new Location(20, 180));
        City A1 = new City("A1", new Location(40, 200));
        City B1 = new City("B1", new Location(80, 200));
        City C1 = new City("C1", new Location(20, 60));
        City D1 = new City("D1", new Location(60, 20));
        City E1 = new City("E1", new Location(140, 20));
        City F1 = new City("F1", new Location(160, 140));
        City G1 = new City("G1", new Location(240, 120));
        City H1 = new City("H1", new Location(240, 160));
        City I1 = new City("I1", new Location(200, 200));
        City J1 = new City("J1", new Location(220, 220));
        City K1 = new City("K1", new Location(160, 200));
        City L1 = new City("L1", new Location(120, 220));
        City M1 = new City("M1", new Location(240, 60));
        City N1 = new City("N1", new Location(300, 100));
        City O1 = new City("O1", new Location(280, 160));
        City P1 = new City("P1", new Location(260, 240));
        City Q1 = new City("Q1", new Location(160, 240));
        City R1 = new City("R1", new Location(60, 260));
        City S1 = new City("S1", new Location(20, 240));
        City T1 = new City("T1", new Location(260, 20));

        List<Journey> list = new ArrayList<>();

        Journey AD1 = new Journey(VehicleType.BUS, A, D1, new BigDecimal(40));
        list.add(AD1);
        Journey D1A = new Journey(VehicleType.BUS, D1, A, new BigDecimal(40));
        list.add(D1A);
        Journey D1R = new Journey(VehicleType.BUS, D1, R, new BigDecimal(100));
        list.add(D1R);
        Journey RD1 = new Journey(VehicleType.BUS, R, D1, new BigDecimal(100));
        list.add(RD1);
        Journey RB = new Journey(VehicleType.BUS, R, B, new BigDecimal(72.11103));
        list.add(RB);
        Journey BR = new Journey(VehicleType.BUS, B, R, new BigDecimal(72.11103));
        list.add(BR);
        Journey BB1 = new Journey(VehicleType.BUS, B, B1, new BigDecimal(116.61904));
        list.add(BB1);
        Journey B1B = new Journey(VehicleType.BUS, B1, B, new BigDecimal(116.61904));
        list.add(B1B);
        Journey L1E = new Journey(VehicleType.BUS, L1, E, new BigDecimal(107.7033));
        list.add(L1E);
        Journey EL1 = new Journey(VehicleType.BUS, E, L1, new BigDecimal(107.7033));
        list.add(EL1);
        Journey S1H1 = new Journey(VehicleType.BUS, S1, H1, new BigDecimal(234.094));
        list.add(S1H1);
        Journey H1S1 = new Journey(VehicleType.BUS, H1, S1, new BigDecimal(234.094));
        list.add(H1S1);
        Journey R1F = new Journey(VehicleType.BUS, R1, F, new BigDecimal(141.42136));
        list.add(R1F);
        Journey FR1 = new Journey(VehicleType.BUS, F, R1, new BigDecimal(141.42136));
        list.add(FR1);
        Journey ZQ1 = new Journey(VehicleType.BUS, Z, Q1, new BigDecimal(152.31546));
        list.add(ZQ1);
        Journey Q1Z = new Journey(VehicleType.BUS, Q1, Z, new BigDecimal(152.31546));
        list.add(Q1Z);
        Journey Q1M1 = new Journey(VehicleType.BUS, Q1, M1, new BigDecimal(196.97716));
        list.add(Q1M1);
        Journey M1Q1 = new Journey(VehicleType.BUS, M1, Q1, new BigDecimal(196.97716));
        list.add(M1Q1);
        Journey M1N = new Journey(VehicleType.BUS, M1, N, new BigDecimal(220.90722));
        list.add(M1N);
        Journey NM1 = new Journey(VehicleType.BUS, N, M1, new BigDecimal(220.90722));
        list.add(NM1);
        Journey NK = new Journey(VehicleType.BUS, N, K, new BigDecimal(189.73666));
        list.add(NK);
        Journey KN = new Journey(VehicleType.BUS, K, N, new BigDecimal(189.73666));
        list.add(KN);
        Journey KP1 = new Journey(VehicleType.BUS, K, P1, new BigDecimal(228.03509));
        list.add(KP1);
        Journey P1K = new Journey(VehicleType.BUS, P1, K, new BigDecimal(228.03509));
        list.add(P1K);
        Journey P1O = new Journey(VehicleType.BUS, P1, O, new BigDecimal(196.97716));
        list.add(P1O);
        Journey OP1 = new Journey(VehicleType.BUS, O, P1, new BigDecimal(196.97716));
        list.add(OP1);
        Journey OC = new Journey(VehicleType.BUS, O, C, new BigDecimal(72.11103));
        list.add(OC);
        Journey CO = new Journey(VehicleType.BUS, C, O, new BigDecimal(72.11103));
        list.add(CO);
        Journey CN1 = new Journey(VehicleType.BUS, C, N1, new BigDecimal(180));
        list.add(CN1);
        Journey N1C = new Journey(VehicleType.BUS, N1, C, new BigDecimal(180));
        list.add(N1C);
        Journey N1G1 = new Journey(VehicleType.BUS, N1, G1, new BigDecimal(63.24555));
        list.add(N1G1);
        Journey G1N1 = new Journey(VehicleType.BUS, G1, N1, new BigDecimal(63.24555));
        list.add(G1N1);
        Journey H1T1 = new Journey(VehicleType.BUS, H1, T1, new BigDecimal(141.42136));
        list.add(H1T1);
        Journey T1H1 = new Journey(VehicleType.BUS, T1, H1, new BigDecimal(141.42136));
        list.add(T1H1);
        Journey T1C1 = new Journey(VehicleType.BUS, T1, C1, new BigDecimal(243.3105));
        list.add(T1C1);
        Journey C1T1 = new Journey(VehicleType.BUS, C1, T1, new BigDecimal(243.3105));
        list.add(C1T1);
        Journey LT = new Journey(VehicleType.BUS, L, T, new BigDecimal(72.11103));
        list.add(LT);
        Journey TL = new Journey(VehicleType.BUS, T, L, new BigDecimal(72.11103));
        list.add(TL);
        Journey E1F1 = new Journey(VehicleType.BUS, E1, F1, new BigDecimal(121.65525));
        list.add(E1F1);
        Journey F1E1 = new Journey(VehicleType.BUS, F1, E1, new BigDecimal(121.65525));
        list.add(F1E1);
        Journey VI1 = new Journey(VehicleType.BUS, V, I1, new BigDecimal(100));
        list.add(VI1);
        Journey I1V = new Journey(VehicleType.BUS, I1, V, new BigDecimal(100));
        list.add(I1V);
        Journey J1B1 = new Journey(VehicleType.BUS, J1, B1, new BigDecimal(141.42136));
        list.add(J1B1);
        Journey B1J1 = new Journey(VehicleType.BUS, B1, J1, new BigDecimal(141.42136));
        list.add(B1J1);
        Journey A1E = new Journey(VehicleType.BUS, A1, E, new BigDecimal(89.44272));
        list.add(A1E);
        Journey EA1 = new Journey(VehicleType.BUS, E, A1, new BigDecimal(89.44272));
        list.add(EA1);
        Journey WH = new Journey(VehicleType.BUS, W, H, new BigDecimal(116.61904));
        list.add(WH);
        Journey HW = new Journey(VehicleType.BUS, H, W, new BigDecimal(116.61904));
        list.add(HW);
        Journey GJ = new Journey(VehicleType.BUS, G, J, new BigDecimal(126.49111));
        list.add(GJ);
        Journey JG = new Journey(VehicleType.BUS, J, G, new BigDecimal(126.49111));
        list.add(JG);
        Journey UJ1 = new Journey(VehicleType.BUS, U, J1, new BigDecimal(121.65525));
        list.add(UJ1);
        Journey J1U = new Journey(VehicleType.BUS, J1, U, new BigDecimal(121.65525));
        list.add(J1U);
        Journey Q1D1 = new Journey(VehicleType.BUS, Q1, D1, new BigDecimal(241.66092));
        list.add(Q1D1);
        Journey D1Q1 = new Journey(VehicleType.BUS, D1, Q1, new BigDecimal(241.66092));
        list.add(D1Q1);
        Journey VR = new Journey(VehicleType.BUS, V, R, new BigDecimal(63.24555));
        list.add(VR);
        Journey RV = new Journey(VehicleType.BUS, R, V, new BigDecimal(63.24555));
        list.add(RV);
        Journey SO1 = new Journey(VehicleType.BUS, S, O1, new BigDecimal(144.22205));
        list.add(SO1);
        Journey O1S = new Journey(VehicleType.BUS, O1, S, new BigDecimal(144.22205));
        list.add(O1S);
        Journey O1A1 = new Journey(VehicleType.BUS, O1, A1, new BigDecimal(243.3105));
        list.add(O1A1);
        Journey A1O1 = new Journey(VehicleType.BUS, A1, O1, new BigDecimal(243.3105));
        list.add(A1O1);
        Journey ZF = new Journey(VehicleType.BUS, Z, F, new BigDecimal(63.24555));
        list.add(ZF);
        Journey FZ = new Journey(VehicleType.BUS, F, Z, new BigDecimal(63.24555));
        list.add(FZ);
        Journey R1P1 = new Journey(VehicleType.BUS, R1, P1, new BigDecimal(200.99751));
        list.add(R1P1);
        Journey P1R1 = new Journey(VehicleType.BUS, P1, R1, new BigDecimal(200.99751));
        list.add(P1R1);
        Journey F1J = new Journey(VehicleType.BUS, F1, J, new BigDecimal(101.98039));
        list.add(F1J);
        Journey JF1 = new Journey(VehicleType.BUS, J, F1, new BigDecimal(101.98039));
        list.add(JF1);
        Journey E1F = new Journey(VehicleType.BUS, E1, F, new BigDecimal(141.42136));
        list.add(E1F);
        Journey FE1 = new Journey(VehicleType.BUS, F, E1, new BigDecimal(141.42136));
        list.add(FE1);
        Journey HM1 = new Journey(VehicleType.BUS, H, M1, new BigDecimal(140));
        list.add(HM1);
        Journey M1H = new Journey(VehicleType.BUS, M1, H, new BigDecimal(140));
        list.add(M1H);
        Journey DO1 = new Journey(VehicleType.BUS, D, O1, new BigDecimal(184.39089));
        list.add(DO1);
        Journey O1D = new Journey(VehicleType.BUS, O1, D, new BigDecimal(184.39089));
        list.add(O1D);
        Journey DM = new Journey(VehicleType.BUS, D, M, new BigDecimal(72.11103));
        list.add(DM);
        Journey MD = new Journey(VehicleType.BUS, M, D, new BigDecimal(72.11103));
        list.add(MD);
        Journey MA = new Journey(VehicleType.BUS, M, A, new BigDecimal(56.568));
        list.add(MA);
        Journey AM = new Journey(VehicleType.BUS, A, M, new BigDecimal(56.568));
        list.add(AM);
        Journey LN1 = new Journey(VehicleType.BUS, L, N1, new BigDecimal(215.406));
        list.add(LN1);
        Journey N1L = new Journey(VehicleType.BUS, N1, L, new BigDecimal(215.406));
        list.add(N1L);
        Journey WS1 = new Journey(VehicleType.BUS, W, S1, new BigDecimal(82.462));
        list.add(WS1);
        Journey S1W = new Journey(VehicleType.BUS, S1, W, new BigDecimal(82.462));
        list.add(S1W);
        Journey I1R1 = new Journey(VehicleType.BUS, I1, R1, new BigDecimal(152.315));
        list.add(I1R1);
        Journey R1I1 = new Journey(VehicleType.BUS, R1, I1, new BigDecimal(152.315));
        list.add(R1I1);
        RideRight rideRight = new RideRight(list);

        SequencedCollection<Journey> l1 = rideRight.findCheapestPath(F, T1, true);

        SequencedCollection<Journey> test1 = List.of(FZ, ZQ1, Q1M1, M1H, HW, WS1, S1H1, H1T1);

        Assertions.assertEquals(l1, test1);

        SequencedCollection<Journey> l2 = rideRight.findCheapestPath(A, O1, true);

        SequencedCollection<Journey> test2 = List.of(AM, MD, DO1);

        Assertions.assertEquals(l2, test2);

        SequencedCollection<Journey> l3 = rideRight.findCheapestPath(N, P1, true);

        SequencedCollection<Journey> test3 = List.of(NK, KP1);

        Assertions.assertEquals(l3, test3);
    }
}
